##if unexpected event happens while getting information from web, it makes error

import requests
from bs4 import BeautifulSoup
import time
import urllib.request #
from selenium.webdriver import Chrome
import re     
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.keys import Keys
import datetime as dt
import os


delay=3
chrome_path = '/Users/mac/Downloads/chromedriver'
browser = Chrome(chrome_path) #크롬드라이버가 위치해 있는 경로를 꼭 설정해주어야 한다. 
browser.implicitly_wait(delay)
start_url  = 'https://www.youtube.com/watch?v=y9xS10OEn7I'
browser.get(start_url)  
browser.maximize_window()

body = browser.find_element_by_tag_name('body') # for scrolling

comment_data = pd.DataFrame({'youtube_id':[],
                            'comment':[],
                            'like_num':[]})

time.sleep(2)

num_page_down = 1
while num_page_down:
    body.send_keys(Keys.PAGE_DOWN)
    time.sleep(1.5)
    num_page_down -= 1


browser.find_element_by_xpath('//paper-button[@class="dropdown-trigger style-scope yt-dropdown-menu"]').click()

time.sleep(1.5)
browser.find_element_by_xpath('//paper-listbox[@class="dropdown-content style-scope yt-dropdown-menu"]/a[1]').click()


num_page_down = 30
while num_page_down:
    body.send_keys(Keys.PAGE_DOWN)
    time.sleep(1)
    num_page_down -= 1
    
html_s0 = browser.page_source
html_s = BeautifulSoup(html_s0,'html.parser')

comment0 = html_s.find_all('ytd-comment-renderer',{'class':'style-scope ytd-comment-thread-renderer'})

for i in range(len(comment0)):
    #comments
    comment = comment0[i].find('yt-formatted-string',{'id':'content-text','class':'style-scope ytd-comment-renderer'}).text
    
    try:
        aa = comment0[i].find('span',{'id':'vote-count-left'}).text
        like_num = "".join(re.findall('[0-9]',aa)) + "개"
    except:
        like_num = 0
        
    bb = comment0[i].find('a',{'id':'author-text'}).find('span').text
    youtube_id = "".join(re.findall('[가-힣0-9a-zA-Z]',bb))
    
    insert_data =  pd.DataFrame({'youtube_id':[youtube_id],
                                               'comment':[comment],
                                               'like_num':[like_num]})

    comment_data = comment_data.append(insert_data)
    
comment_data.index = range(len(comment_data))

#print(comment_data)
comment_data.to_csv('text_mining.csv', index=False)
comment_data = pd.read_csv('text_mining.csv')
comment_list = []
for i in range(len(comment_data)):
    comment_list.append(comment_data['comment'].iloc[i])



#remove emoji
def apply_kko_regex(msg_list):
    emoji_pattern = re.compile("["u"\U0001F600-\U0001F64F"  # emoticons
                               u"\U0001F300-\U0001F5FF"  # symbols & pictographs
                               "]+", flags=re.UNICODE)

    kko_parse_result = []
    
    for i in comment_list:
        tokens = re.sub(emoji_pattern,"",i)
        kko_parse_result.append(tokens)
    
    
    return kko_parse_result

tm0 = apply_kko_regex(comment_list)


#한글 형태소 분석기 konlpy
from konlpy.tag import Kkma
from konlpy.tag import Mecab
from konlpy.tag import Twitter
#apply lambda사용


t = Twitter()

noun_list = []
for i in tm0:
    tuple_list=t.pos(i)
    for j in tuple_list:
        if j[1]=='Noun':
            noun_list.append(j[0])

#get frequency per words
freq_map={}
for i in noun_list:
    freq_map[i]=1+freq_map.get(i,0)
    


#make wordcloud
from wordcloud import WordCloud
font_path = '/usr/share/fonts/truetype/NanumBarunGothic.ttf' #korean font 경로설정을 해주어야 글자가 깨지지 않는다
wordcloud = WordCloud(
    font_path,
    width = 800,
    height = 800
)

wordcloud = wordcloud.generate_from_frequencies(freq_map)

def __array__(self):
    """Convert to numpy array.
    Returns
    -------
    image : nd-array size (width, height, 3)
        Word cloud image as numpy matrix.
    """
    return self.to_array()

def to_array(self):
    """Convert to numpy array.
    Returns
    -------
    image : nd-array size (width, height, 3)
        Word cloud image as numpy matrix.
    """
    return np.array(self.to_image())

array = wordcloud.to_array()
print(type(array)) # numpy.ndarray
print(array.shape) # (800, 800, 3)

%matplotlib inline
import matplotlib.pyplot as plt

fig = plt.figure(figsize=(10, 10))
plt.imshow(array, interpolation="bilinear")
plt.show()


